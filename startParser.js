const puppeteer = require("puppeteer-extra");const fs = require("fs");const links = require("./db/links.json");module.exports = async function startParser(bot) {  try {    console.log('startParser');    const fs = require('fs');    const puppeteer = require('puppeteer-extra');    const StealthPlugin = require('puppeteer-extra-plugin-stealth');    puppeteer.use(StealthPlugin());    const browser = await puppeteer.launch({      headless: false,      args: ['--window-size=1900,1200',        "--no-sandbox",        "--disable-gpu",        "--enable-webgl",        "--disable-web-security"      ]    });    let message = '';    let i = 0;    setInterval(async () => {      console.log('I: ' + i);      const links = require('./db/links.json');      const linksIds = require('./db/ids.json');      let link = links[i];      const page = await browser.newPage();      //await page.setRequestInterception(true);      const ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36';      await page.setUserAgent(ua);      await page.setViewport({        width: 1900,        height: 1200,        deviceScaleFactor: 1,      });      await page.goto(link.link);      //await page.waitForTimeout((Math.floor(Math.random() * 12) + 5) * 1000)      //await page.setDefaultNavigationTimeout(60000);      await page.waitForTimeout(10000);      try {        const Captcha = require('2captcha');        const fs = require('fs');        async function solveCaptcha() {          try {            await (await page.$("img")).screenshot({path: "captcha.png"});            const solver = new Captcha.Solver("7a3e39ae301c8d02cb1bf1ca713e3eca");            const answer = await solver.imageCaptcha(fs.readFileSync("captcha.png", "base64"));            console.log(answer.data);            await page.type('input[type="text"]', answer.data);            await page.keyboard.press("Enter");            await page.waitForTimeout(5000);            const captchaImgElem = await page.$eval(".captcha", () => true);            if (captchaImgElem)              await solveCaptcha();          } catch (err) {            console.log('solved', err.message);            return;          }        };        const yes = await page.$eval(".captcha", () => true);        if (yes) {          console.log('captcha');          await solveCaptcha();        }      } catch (e) {        //console.log('no captcha', e.message);      }      try {        await page.waitForSelector('.input.text-input.size');        await page.click('.input.text-input.size');        const elements = await page.$x('//*[@id=\"app\"]/main/div/div[1]/div[2]/div/div[2]/div/div[2]/div[1]/div/div[1]/div/div[2]/ul/li[2]');        await elements[0].click();        await page.waitForTimeout(10000);        const itemPrices = await page.$$eval('.item-money', prices => prices.map(price => price.textContent.trim()));        const itemImageHrefs = await page.$$eval('.item-image a', links => links.map(link => link.href));        const productIds = await page.$$eval('.catalog-item.catalog-item-desktop.ddl_product', divs => {          return divs.map(div => {            // Получите значение атрибута data-product-id            return div.getAttribute('data-product-id');          });        });        await page.close();        itemPrices.forEach((item, index) => {          itemPrices[index] = item.replace('₽', '').replace(/\s+/g, ' ').trim();        });        console.log(itemPrices);        itemPrices.forEach((item, index) => {          let obj = item.split(' ');          let price = Number(obj[0] + obj[1]);          if (!obj[2]) obj[2] = '123';          let cashback = (obj[2]).includes('%') ? Number(obj[2].replace('%', '')) : 0;          if (Number(cashback) && Number(price) <= Number(link.price) && Number(cashback) >= Number(link.cashback)) {            if (linksIds.includes(productIds[index])) return;            linksIds.push(productIds[index]);            fs.writeFile("./db/ids.json", JSON.stringify(linksIds), (err) => console.log(err));            bot.sendMessage(-1002028596063, `❗️${itemImageHrefs[index]} ❗️\n Стоимость: ${price}₽\nКешбек: ${cashback}% (${obj[3]} ${obj[4] ? obj[4] : ''}₽)`, {              disable_web_page_preview: true            });          }        });      } catch (e) {        console.log('error', e.message);        await page.close();      }      i++;      if (i > links.length-1) {        i = 0;      }    }, 60000);  } catch (e) {    console.log("Something went wrong: " + e.name);  }}